#!/bin/bash

# Script de verificaci√≥n r√°pida para el sistema de autenticaci√≥n
# Verifica que los cambios del fix de relogin funcionen correctamente

echo "üîç VERIFICACI√ìN R√ÅPIDA DEL SISTEMA DE AUTENTICACI√ìN"
echo "=================================================="

# Verificar que el servidor est√© corriendo
echo "1. Verificando que el servidor est√© corriendo..."
if curl -s http://localhost:5001/health > /dev/null; then
    echo "‚úÖ Servidor corriendo en puerto 5001"
else
    echo "‚ùå Servidor no est√° corriendo en puerto 5001"
    exit 1
fi

# Verificar endpoints cr√≠ticos
echo ""
echo "2. Verificando endpoints cr√≠ticos..."

# Endpoint de login
echo "   - POST /api/login"
if curl -s -X POST http://localhost:5001/api/login \
    -H "Content-Type: application/json" \
    -d '{"email":"test@example.com","password":"test"}' > /dev/null; then
    echo "   ‚úÖ Endpoint de login responde"
else
    echo "   ‚ùå Endpoint de login no responde"
fi

# Endpoint de Google OAuth
echo "   - POST /api/google-auth"
if curl -s -X POST http://localhost:5001/api/google-auth \
    -H "Content-Type: application/json" \
    -d '{"token":"test","user":{"email":"test@example.com"}}' > /dev/null; then
    echo "   ‚úÖ Endpoint de Google OAuth responde"
else
    echo "   ‚ùå Endpoint de Google OAuth no responde"
fi

# Endpoint de diagn√≥stico
echo "   - GET /api/diagnostics/profilesusers"
if curl -s -X GET http://localhost:5001/api/diagnostics/profilesusers > /dev/null; then
    echo "   ‚úÖ Endpoint de diagn√≥stico responde"
else
    echo "   ‚ùå Endpoint de diagn√≥stico no responde"
fi

# Verificar configuraci√≥n de cookies
echo ""
echo "3. Verificando configuraci√≥n de cookies..."

# Verificar variables de entorno cr√≠ticas
if [ -n "$COOKIE_DOMAIN" ]; then
    echo "   ‚úÖ COOKIE_DOMAIN configurado: $COOKIE_DOMAIN"
else
    echo "   ‚ö†Ô∏è  COOKIE_DOMAIN no configurado (OK para desarrollo)"
fi

if [ -n "$JWT_SECRET" ]; then
    echo "   ‚úÖ JWT_SECRET configurado"
else
    echo "   ‚ùå JWT_SECRET no configurado"
fi

if [ -n "$SESSION_SECRET" ]; then
    echo "   ‚úÖ SESSION_SECRET configurado"
else
    echo "   ‚ùå SESSION_SECRET no configurado"
fi

# Verificar archivos cr√≠ticos
echo ""
echo "4. Verificando archivos cr√≠ticos..."

files=(
    "dist/controllers/authController.js"
    "dist/routes/authRoutes.js"
    "dist/config/jwt.js"
    "CONFIGURACION_PRODUCCION.md"
)

for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo "   ‚úÖ $file existe"
    else
        echo "   ‚ùå $file no existe"
    fi
done

# Verificar funciones cr√≠ticas en el c√≥digo
echo ""
echo "5. Verificando funciones cr√≠ticas..."

# Verificar getUserIdFromToken mejorado
if grep -q "req.cookies && req.cookies.auth_token" dist/controllers/authController.js; then
    echo "   ‚úÖ getUserIdFromToken busca en cookies"
else
    echo "   ‚ùå getUserIdFromToken no busca en cookies"
fi

# Verificar endpoint de diagn√≥stico
if grep -q "diagnosProfilesusers" dist/routes/authRoutes.js; then
    echo "   ‚úÖ Endpoint de diagn√≥stico configurado"
else
    echo "   ‚ùå Endpoint de diagn√≥stico no configurado"
fi

# Verificar manejo robusto de profilesusers
if grep -q "no cr√≠tico" dist/controllers/authController.js; then
    echo "   ‚úÖ Manejo robusto de profilesusers implementado"
else
    echo "   ‚ùå Manejo robusto de profilesusers no implementado"
fi

echo ""
echo "=================================================="
echo "‚úÖ VERIFICACI√ìN COMPLETA"
echo ""
echo "üöÄ Para probar el fix completo:"
echo "1. Haz login con Google o email"
echo "2. Verifica que no necesites relogin"
echo "3. Revisa los logs para ver mensajes de diagn√≥stico"
echo "4. Usa /api/diagnostics/profilesusers si hay problemas"
echo ""
echo "üìö Documentaci√≥n completa: CONFIGURACION_PRODUCCION.md"
