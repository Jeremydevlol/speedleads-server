#!/usr/bin/env node

/**
 * Script de prueba para verificar la integraci√≥n de URLs de video
 * Ejecutar con: node test-video-url-integration.js
 */

import { detectVideoUrl, checkYtDlpAvailability } from './dist/utils/videoUrlProcessor.js';

console.log('üß™ Iniciando pruebas de integraci√≥n de URLs de video...\n');

// Test 1: Verificar detecci√≥n de URLs
console.log('üìã Test 1: Detecci√≥n de URLs de video');
console.log('=====================================');

const testUrls = [
  'https://www.youtube.com/watch?v=dQw4w9WgXcQ',
  'https://youtu.be/dQw4w9WgXcQ',
  'https://www.youtube.com/shorts/abc123',
  'https://www.instagram.com/reel/ABC123/',
  'https://www.instagram.com/p/DEF456/',
  'https://www.tiktok.com/@user/video/123456789',
  'https://vm.tiktok.com/ZMh123abc/',
  'https://www.tiktok.com/t/ZTd123def/',
  'https://example.com/not-a-video', // URL no v√°lida
  'not-a-url-at-all' // Texto no v√°lido
];

testUrls.forEach((url, index) => {
  const result = detectVideoUrl(url);
  const status = result.isValid ? '‚úÖ' : '‚ùå';
  const platform = result.platform || 'no soportada';
  console.log(`${status} URL ${index + 1}: ${platform.padEnd(12)} | ${url}`);
});

console.log('\nüìã Test 2: Verificaci√≥n de yt-dlp');
console.log('==================================');

try {
  const ytDlpAvailable = await checkYtDlpAvailability();
  if (ytDlpAvailable) {
    console.log('‚úÖ yt-dlp est√° disponible y funcionando');
  } else {
    console.log('‚ùå yt-dlp no est√° disponible');
    console.log('üí° Para instalar: pip3 install yt-dlp');
  }
} catch (error) {
  console.log('‚ùå Error verificando yt-dlp:', error.message);
}

console.log('\nüìã Test 3: Verificaci√≥n de archivos');
console.log('===================================');

import fs from 'fs';
import path from 'path';

const requiredFiles = [
  './dist/utils/videoUrlProcessor.js',
  './dist/utils/personalityVideoUrlHandler.js',
  './dist/controllers/personalityController.js',
  './dist/routes/personalityRoutes.js'
];

requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - FALTA`);
  }
});

console.log('\nüìã Test 4: Verificaci√≥n de directorio temporal');
console.log('==============================================');

const tempDir = './temp_downloads';
if (!fs.existsSync(tempDir)) {
  try {
    fs.mkdirSync(tempDir, { recursive: true });
    console.log(`‚úÖ Directorio temporal creado: ${tempDir}`);
  } catch (error) {
    console.log(`‚ùå Error creando directorio temporal: ${error.message}`);
  }
} else {
  console.log(`‚úÖ Directorio temporal ya existe: ${tempDir}`);
}

// Verificar permisos de escritura
try {
  const testFile = path.join(tempDir, 'test-write.txt');
  fs.writeFileSync(testFile, 'test');
  fs.unlinkSync(testFile);
  console.log('‚úÖ Permisos de escritura verificados');
} catch (error) {
  console.log(`‚ùå Error de permisos de escritura: ${error.message}`);
}

console.log('\nüéâ Resumen de la integraci√≥n');
console.log('============================');
console.log('‚úÖ Funciones de detecci√≥n de URLs implementadas');
console.log('‚úÖ Controlador de personality modificado');
console.log('‚úÖ Rutas agregadas para validaci√≥n de URLs');
console.log('‚úÖ Archivos de utilidades copiados a dist/');

console.log('\nüìù Pr√≥ximos pasos:');
console.log('1. Ejecutar: ./install-video-support.sh');
console.log('2. Reiniciar el servidor: npm restart');
console.log('3. Probar con URLs reales en el frontend');

console.log('\nüîß Endpoints disponibles:');
console.log('POST /api/personalities/validate-video-url');
console.log('POST /api/personalities/video-info');
console.log('POST /api/personalities/instructions (ahora soporta URLs de video)');

console.log('\n‚ú® La integraci√≥n est√° completa y lista para usar!');
