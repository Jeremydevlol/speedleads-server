import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

/**
 * Procesa una transcripci√≥n cruda y la convierte en instrucciones estructuradas
 * @param {string} transcription - Transcripci√≥n cruda del video
 * @param {object} metadata - Metadatos del video (t√≠tulo, canal, etc.)
 * @param {string} platform - Plataforma del video (youtube, tiktok, instagram)
 * @returns {Promise<string>} - Instrucciones estructuradas
 */
export async function processTranscriptionToInstructions(transcription, metadata = {}, platform = '') {
  try {
    if (!transcription || transcription.trim().length === 0) {
      return 'No hay contenido de audio para procesar en instrucciones.';
    }

    console.log('ü§ñ Procesando transcripci√≥n con IA...');
    console.log(`üìù Texto original: ${transcription.length} caracteres`);

    const systemPrompt = `Eres un asistente experto en convertir transcripciones de videos en instrucciones claras y estructuradas.

Tu tarea es tomar la transcripci√≥n de un video y convertirla en instrucciones √∫tiles, informaci√≥n organizada, o indicaciones claras que una IA pueda usar para aprender.

REGLAS:
1. Mant√©n TODA la informaci√≥n de la transcripci√≥n original
2. Organiza el contenido en secciones claras
3. Convierte declaraciones en instrucciones o informaci√≥n estructurada
4. Usa formato claro con vi√±etas, numeraci√≥n o secciones
5. No inventes informaci√≥n que no est√© en la transcripci√≥n
6. Si hay consejos, convi√©rtelos en instrucciones directas
7. Si hay informaci√≥n, organ√≠zala por temas
8. Si hay narraciones, extrae los puntos clave como datos

FORMATO DE SALIDA:
- Usa encabezados claros (##, ###)
- Organiza en secciones l√≥gicas
- Convierte en instrucciones accionables cuando sea posible
- Mant√©n el contexto y significado original`;

    const userPrompt = `Convierte esta transcripci√≥n de video de ${platform} en instrucciones estructuradas:

METADATOS DEL VIDEO:
- T√≠tulo: ${metadata.title || 'Sin t√≠tulo'}
- Canal/Usuario: ${metadata.uploader || metadata.channel || 'Desconocido'}
- Plataforma: ${platform}
- Duraci√≥n: ${metadata.duration ? `${Math.floor(metadata.duration / 60)}:${String(metadata.duration % 60).padStart(2, '0')}` : 'N/A'}

TRANSCRIPCI√ìN ORIGINAL:
"${transcription}"

Convierte esto en instrucciones claras y estructuradas manteniendo toda la informaci√≥n:`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      temperature: 0.3,
      max_tokens: 2000
    });

    if (!completion.choices[0]?.message?.content) {
      throw new Error('No se recibi√≥ respuesta v√°lida de OpenAI');
    }

    const processedInstructions = completion.choices[0].message.content.trim();
    
    console.log('‚úÖ Transcripci√≥n procesada exitosamente');
    console.log(`üìã Instrucciones generadas: ${processedInstructions.length} caracteres`);

    return processedInstructions;

  } catch (error) {
    console.error('‚ùå Error procesando transcripci√≥n con IA:', error.message);
    
    // Fallback: devolver transcripci√≥n original con formato b√°sico
    const fallbackInstructions = formatTranscriptionBasic(transcription, metadata, platform);
    console.log('‚ö†Ô∏è Usando formato b√°sico como fallback');
    
    return fallbackInstructions;
  }
}

/**
 * Formato b√°sico de fallback cuando la IA no est√° disponible
 * @param {string} transcription - Transcripci√≥n original
 * @param {object} metadata - Metadatos del video
 * @param {string} platform - Plataforma
 * @returns {string} - Instrucciones con formato b√°sico
 */
function formatTranscriptionBasic(transcription, metadata = {}, platform = '') {
  return `## Informaci√≥n del Video de ${platform.charAt(0).toUpperCase() + platform.slice(1)}

### Metadatos
- **T√≠tulo:** ${metadata.title || 'Sin t√≠tulo'}
- **Canal/Usuario:** ${metadata.uploader || metadata.channel || 'Desconocido'}
- **Plataforma:** ${platform}
- **Duraci√≥n:** ${metadata.duration ? `${Math.floor(metadata.duration / 60)}:${String(metadata.duration % 60).padStart(2, '0')}` : 'N/A'}

### Contenido Transcrito
${transcription}

### Instrucciones de Uso
- Utiliza esta informaci√≥n como referencia del contenido del video
- El contenido proviene de una transcripci√≥n autom√°tica
- Mant√©n el contexto original al referenciar esta informaci√≥n`;
}

/**
 * Procesa m√∫ltiples transcripciones y las combina en instrucciones coherentes
 * @param {Array} transcriptions - Array de objetos con transcripci√≥n y metadatos
 * @returns {Promise<string>} - Instrucciones combinadas
 */
export async function processBatchTranscriptions(transcriptions) {
  try {
    if (!transcriptions || transcriptions.length === 0) {
      return 'No hay transcripciones para procesar.';
    }

    console.log(`ü§ñ Procesando ${transcriptions.length} transcripciones en lote...`);

    if (transcriptions.length === 1) {
      // Si solo hay una, usar el procesamiento individual
      return await processTranscriptionToInstructions(
        transcriptions[0].transcription,
        transcriptions[0].metadata,
        transcriptions[0].platform
      );
    }

    // Para m√∫ltiples transcripciones, crear un prompt combinado
    const systemPrompt = `Eres un asistente experto en organizar m√∫ltiples transcripciones de videos en un conjunto coherente de instrucciones.

Tu tarea es tomar varias transcripciones de diferentes videos y organizarlas en instrucciones estructuradas y coherentes.

REGLAS:
1. Mant√©n TODA la informaci√≥n de todas las transcripciones
2. Organiza por temas o videos cuando sea apropiado
3. Elimina redundancias pero mant√©n informaci√≥n √∫nica
4. Crea secciones claras para cada video o tema
5. Convierte en instrucciones accionables cuando sea posible
6. Numera o identifica claramente cada fuente`;

    let combinedPrompt = 'Organiza estas transcripciones de videos en instrucciones estructuradas:\n\n';
    
    transcriptions.forEach((item, index) => {
      combinedPrompt += `### VIDEO ${index + 1} (${item.platform})\n`;
      combinedPrompt += `**T√≠tulo:** ${item.metadata?.title || 'Sin t√≠tulo'}\n`;
      combinedPrompt += `**Usuario:** ${item.metadata?.uploader || 'Desconocido'}\n`;
      combinedPrompt += `**Transcripci√≥n:** "${item.transcription}"\n\n`;
    });

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: combinedPrompt }
      ],
      temperature: 0.3,
      max_tokens: 3000
    });

    const processedInstructions = completion.choices[0]?.message?.content?.trim();
    
    if (!processedInstructions) {
      throw new Error('No se recibi√≥ respuesta v√°lida para procesamiento en lote');
    }

    console.log('‚úÖ Transcripciones en lote procesadas exitosamente');
    return processedInstructions;

  } catch (error) {
    console.error('‚ùå Error procesando transcripciones en lote:', error.message);
    
    // Fallback: procesar individualmente y combinar
    let combinedInstructions = '## Instrucciones de M√∫ltiples Videos\n\n';
    
    for (let i = 0; i < transcriptions.length; i++) {
      const item = transcriptions[i];
      combinedInstructions += `### Video ${i + 1} - ${item.platform}\n`;
      combinedInstructions += formatTranscriptionBasic(item.transcription, item.metadata, item.platform);
      combinedInstructions += '\n\n';
    }
    
    return combinedInstructions;
  }
}

/**
 * Valida y limpia una transcripci√≥n antes del procesamiento
 * @param {string} transcription - Transcripci√≥n a validar
 * @returns {object} - {isValid, cleanedTranscription, issues}
 */
export function validateTranscription(transcription) {
  const issues = [];
  
  if (!transcription || typeof transcription !== 'string') {
    return {
      isValid: false,
      cleanedTranscription: '',
      issues: ['Transcripci√≥n no v√°lida o vac√≠a']
    };
  }

  let cleaned = transcription.trim();
  
  // Verificar longitud m√≠nima
  if (cleaned.length < 10) {
    issues.push('Transcripci√≥n muy corta (menos de 10 caracteres)');
  }
  
  // Verificar si parece ser solo ruido o errores
  const noisePatterns = [
    /^[\s\.\,\!\?\-]*$/,  // Solo puntuaci√≥n y espacios
    /^(uh|um|eh|ah|mm)+$/i,  // Solo muletillas
    /^\[.*\]$/  // Solo texto entre corchetes (errores de transcripci√≥n)
  ];
  
  const seemsLikeNoise = noisePatterns.some(pattern => pattern.test(cleaned));
  if (seemsLikeNoise) {
    issues.push('La transcripci√≥n parece contener solo ruido o errores');
  }
  
  // Limpiar caracteres problem√°ticos
  cleaned = cleaned
    .replace(/\s+/g, ' ')  // M√∫ltiples espacios a uno solo
    .replace(/[^\w\s\.\,\!\?\;\:\-\(\)\[\]]/g, '')  // Caracteres especiales problem√°ticos
    .trim();
  
  return {
    isValid: issues.length === 0,
    cleanedTranscription: cleaned,
    issues
  };
}
